aside {
  display: grid;
  background: {{S_o.light_100}};
}
aside > figure {
  display: none;
}
aside > figure > a {
  position: relative;
  top: {{S_o.PAD_8}};
  text-decoration: none;
  border: 0;
}
aside > figure > a > img {
  width: 100%;
  max-width: {{S_o.FULL_WIDTH_s}};
  max-height: calc( {{S_o.FULL_HEIGHT_s}} - {{S_o.NAV_HEIGHT_s}} );
  object-fit: scale-down;
}
aside > figure > a > img[src*="/gray"] {
  cursor: url(cursor_gray.svg), auto;
}
aside > figure > a > img[src*="/color"] {
  cursor: url(cursor_color.svg), auto;
}
aside > figure:target {
  grid-area: 1/-1;
  display: flex;
  flex-direction: column;
  position: fixed;
  padding-top: {{S_o.NAV_HEIGHT_s}};
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: {{S_o.bg}};
}
aside > figure:target > a:hover {
  border: 0;
}
aside > figure:target > label {
  position: absolute;
}
aside > figure:target > label > span {
  background: {{S_o.dot_expo}};
}
aside > figure:target > label:hover {
  opacity: 1;
}
aside:has( figure[id^={{C_o.ASIDE_COLOR_ID_s}}]:target ) > nav#{{C_o.NAV_ID_s}}_toolset_zoom {
  display: flex;
  top: 0;
  left: 2rem;
}
aside:has( figure[id^={{C_o.ASIDE_COLOR_ID_s}}]:target ) > nav#{{C_o.NAV_ID_s}}_toolset_zoom > input:checked ~ label[for]:nth-of-type( 1 ) {
  background: {{S_o.bg_lo}};
}
aside:has( #{{C_o.INPUT_ID_s}}_toolset_zoom:checked ) > figure[id^={{C_o.ASIDE_COLOR_ID_s}}]:target > a > img {
  width: auto;
  max-width: none;
  max-height: none;
  object-fit: none;
  cursor: move;
}
