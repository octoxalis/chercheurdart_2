const REX_o =
  require( './regex.js' )

const MARK_o =
  require( './3mark.js' )
  
const C_o =
  require( '../data/C_o.js' )
    
//XX const PRE_o =
//XX   require( './pre_insert.js' )

/*
const PRE_o =
{
  process__s:
    source_s =>
    {
      //;console.log( source_s )

      for
      (
        const match_a
        of
        Array
          .from
          (
            source_s
              .matchAll
              (
                REX_o
                  .new__re( 'gms' )
                    `${C_o.INS_OPEN_s}
                    (
                    [₀-₉]{1,3}               //: specifier_s: 1 to 3 subscript digits
                    )
                    \s+?
                    [^${C_o.INS_CLOSE_s}]+?  //: everything up to close
                    ${C_o.INS_CLOSE_s}`
              )
          )
      )
      {
        let
        [
          replace_s,
          specifier_s
        ] =
          match_a

        //;console.table(
        //;  [
        //;    replace_s,
        //;    specifier_s
        //;  ]
        //;  )

        let insert_s =
          replace_s
            .replace    //: replace only the 1rst \n
            (
              '\n',
              ''        //: skip 1rst newline
            )
            .replace    //: replace the 2nd \n
            (
              '\n',
              C_o.INS_PRINCIPAL_s
            )
            .replaceAll    //: replace all remaining \n
            (
              '\n',
              C_o.INS_DELIM_s
            )
            //XX .replaceAll
            //XX (
            //XX   C_o.INS_PASS_s,
            //XX   ''      //: remove
            //XX )
                
        source_s =
          source_s
            .replace
            (
              replace_s,
              insert_s
            )
      }
  
    return source_s
  }
}
*/


module
  .exports =
  {
    process__s:
      source_s =>
        MARK_o
          .process__s( source_s )
          //--.replaceAll
          //--(
          //--  '<',
          //--  '&lt;'
          //--)
          //--.replaceAll
          //--(
          //--  '>',
          //--  '&gt;'
          //--)
                
    ,
  }
