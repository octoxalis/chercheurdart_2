
const READ_o={read__v:(_,e,o="text")=>{fetch(_).then((_=>{if(_.ok)return _[o]();throw new Error(`${_.status}: ${_.statusText}`)})).then((_=>{e(_)})).catch((_=>console.error(_)))}},STAT_o={worker_s:"/assets/scripts/js/stat_worker.min.js",worker_o:null,await_s:"",scan_a:null,put_scan__v:_=>{STAT_o.scan_a=new Function(`return ${_}`)()},receive__v:_=>{const e=_.data;switch(e.task_s){case"PUT_scan":STAT_o.put_scan__v(e.scan_a),STAT_o.await_s&&(STAT_o.resumeAdopt__v(STAT_o.await_s),STAT_o.await_s="")}},init__v:_=>{STAT_o.worker_o=new Worker(STAT_o.worker_s),STAT_o.worker_o.addEventListener("message",STAT_o.receive__v,!0),STAT_o.worker_o.addEventListener("error",STAT_o.handleError__v,!0);const e=document.querySelector("body").dataset.work_s;STAT_o.worker_o.postMessage({task_s:"GET_scan",work_s:e})},handleError__v:_=>console.log`ERROR: ${_.message}`,resumeAdopt__v:_=>{IND_o.adopt__v(_,//!!! section id=stat_s
`IF_${_}`,((e,o)=>{const t=o.querySelector(`#${_}_script`);t&&(t.src=t.dataset.src),console.timeEnd("stat")}))},adopt__v:_=>{if(console.time("stat"),document.getElementById(`IF_${_}`)){if(STAT_o.scan_a)return void STAT_o.resumeAdopt__v(_);STAT_o.await_s=_,STAT_o.init__v(_)}},listener__v:()=>{for(let _ of["burst","aster","paint"]){const e=document.getElementById(`LA_${_}`);e&&e.addEventListener("click",(()=>STAT_o.adopt__v(_)),{once:!0})}}};STAT_o.listener__v();