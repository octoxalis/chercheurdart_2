
class WorkerClient{constructor(s){Object.assign(this,s),this.port_o=new SharedWorker(this.url_s).port,this.port_o.onerror=s=>console.log`ERROR: ${s.message}`,this.port_o.onmessage=s=>this.message__v(s.data)}message__v(s){s.client_s&&s.client_s!==this.client_s||this.handleMessage__v(s)}post__v(s){this.port_o.postMessage(s)}}const STAT_o={worker_o:null,canvas__e(s,e){const t=2048*window.devicePixelRatio,_=document.querySelector(`#canvas_${s}_${e}`);return _.width=t,_.height=t,_},message__v(s){s.task_s},worker__o(s,e,t){const _=new WorkerClient({url_s:"/assets/scripts/js/stat_w.min.js",client_s:s,handleMessage__v:t});switch(s){case"burst":for(let t of["hue","sat","lum"]){const o=STAT_o.canvas__e(s,t).transferControlToOffscreen();_.port_o.postMessage({client_s:s,id_s:t,script_s:e,task_s:"PUT_canvas",pixel_n:window.devicePixelRatio,canvas_e:o},[o])}}return _},adopt__v(s){document.getElementById(`IF_${s}`)&&IND_o.adopt__v(s,//!!! section id=stat_s
`IF_${s}`,((e,t)=>{const _=t.querySelector(`#script_${s}`);_&&(_.src=_.dataset.src)}))},listener__v(){for(let s of["burst","aster","paint"]){const e=document.getElementById(`LA_${s}`);e&&e.addEventListener("click",(()=>STAT_o.adopt__v(s)),{once:!0})}},init__v(s){STAT_o.worker_o=new WorkerClient({url_s:"/assets/scripts/js/stat_w.min.js",client_s:"stat",handleMessage__v:STAT_o.message__v}),STAT_o.worker_o.post__v({task_s:"GET_scan",client_s:"stat",work_s:s})}};STAT_o.listener__v();