
const READ_o={read__v:(_,t,e="text")=>{fetch(_).then((_=>{if(_.ok)return _[e]();throw new Error(`${_.status}: ${_.statusText}`)})).then((_=>{t(_)})).catch((_=>console.error(_)))}},STAT_o={worker_s:"/assets/scripts/js/stat_worker.min.js",worker_o:null,scan_a:null,put_scan__v:_=>{STAT_o.scan_a=new Function(`return ${_}`)()},receive__v:_=>{const t=_.data;switch(t.task_s){case"put_scan":STAT_o.put_scan__v(t.scan_a)}},init__v:()=>{STAT_o.worker_o=new Worker(STAT_o.worker_s),STAT_o.worker_o.addEventListener("message",STAT_o.receive__v,!0),STAT_o.worker_o.addEventListener("error",STAT_o.handleError__v,!0);const _=document.getElementById("stat").dataset.work_s;STAT_o.worker_o.postMessage({task_s:"load_scan",id_s:_})},handleError__v:_=>console.log`ERROR: ${_.message}`,listener__v:()=>{for(let _ of["burst","aster","paint"]){const t=document.getElementById(`LA_${_}`);t&&t.addEventListener("click",STAT_o[`LA_${_}__v`],{once:!0})}},LA_burst__v:()=>{STAT_o.adopt__v("burst")},LA_aster__v:()=>{STAT_o.adopt__v("aster")},LA_paint__v:()=>{STAT_o.adopt__v("paint")},adopt__v:_=>{IND_o.adopt__v("stat",`IF_${_}`,((_,t)=>{}))}};STAT_o.init__v(),STAT_o.listener__v();