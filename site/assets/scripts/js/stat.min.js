
class WorkerClient{constructor(s){this.url_s=s.url_s,this.client_s=s.client_s,this.handleMessage__v=s.handleMessage__v,this.port_o=null,this.init__v()}init__v(){const s=new SharedWorker(this.url_s);this.port_o=s.port,this.port_o.onerror=this.error__v,this.port_o.onmessage=s=>this.message__v(s.data)}error__v(s){console.log`ERROR: ${s.message}`}message__v(s){s.client_s&&s.client_s!==this.client_s||this.handleMessage__v(s)}post__v(s){this.port_o.postMessage(s)}}const READ_o={read__v:(s,t,e="text")=>{fetch(s).then((s=>{if(s.ok)return s[e]();throw new Error(`${s.status}: ${s.statusText}`)})).then((s=>{t(s)})).catch((s=>console.error(s)))}},STAT_o={worker_o:null,message__v:s=>{s.task_s},init__v://!!! from index.js
s=>{STAT_o.worker_o=new WorkerClient({url_s:"/assets/scripts/js/stat_w.min.js",client_s:"stat",handleMessage__v:STAT_o.message__v}),STAT_o.worker_o.post__v({client_s:"stat",task_s:"GET_scan",work_s:s})},adopt__v:s=>{document.getElementById(`IF_${s}`)&&IND_o.adopt__v(s,//!!! section id=stat_s
`IF_${s}`,((t,e)=>{const _=e.querySelector(`#${s}_script`);_&&(_.src=_.dataset.src)}))},listener__v:()=>{for(let s of["burst","aster","paint"]){const t=document.getElementById(`LA_${s}`);t&&t.addEventListener("click",(()=>STAT_o.adopt__v(s)),{once:!0})}}};STAT_o.listener__v();