
//=== scan.js
const SCAN_o =
{
  //: {
  //:   hue_o:
  //:   {
  //:     capacity_a: [360],
  //:     hue_a: [360][...],
  //:   },
  //:
  //:   sat_o:
  //:   {
  //:     capacity_a: [101],
  //:     sat_a: [101][...],
  //:   },
  //:
  //:   lum_o:
  //:   {
  //:     capacity_a: [101],
  //:     lum_a: [101][...],
  //:   }
  //: }
   scan__o:
   (
    buffer_a    //: ArrayBuffer
  ) =>
  {
    let scan_o = //XX new Object()
      {
        hue_o:
        {
          capacity_a: null,
          hue_a: [],
        },

        sat_o:
        {
          capacity_a: null,
          sat_a: [],
        },

        lum_o:
        {
          capacity_a: null,
          lum_a: [],
        }
      }

    let buffer_n = 0    //: buffer_a pointer
    
    let look_n = 0      //: hueLookup_a, satLookup_a, lumLookup_a pointer

    let length_n        //: hue_a, sat_a, lum_a slots length

    const uint32_a =
      new Uint32Array( buffer_a )

    //=== HUE
    let hue_n = 360


    scan_o
      .hue_o
        .capacity_a =
          new Uint32Array
          (
            uint32_a
                .subarray
                (
                  0,
                  hue_n
                )
          )               //;console.log( scan_o )  ;return

    for
    (
      let at_n = 0;
      at_n < hue_n;
      ++at_n
    )
    {
      scan_o
        .hue_o
          .hue_a
            [at_n] = []
    }                       //;console.log( scan_o.hue_o.hue_a )


                             let total_n = 0
    let at_n = 0
    let atc_n = 0

    at_n +=
      hue_n

    for
    (
      let length_n
      of
      scan_o
        .hue_o
          .capacity_a
    )
    {
      //;console.log( at_n )
      //;console.log( `${atc_n}: ${length_n}` )

      scan_o
        .hue_o
          .hue_a
            [atc_n] =
              new Uint32Array
              (
                uint32_a
                    .subarray
                    (
                      at_n,
                      length_n
                    )
              )
              
      ++atc_n
      
      at_n +=
        length_n

                                   total_n +=
                                     length_n
      
    }               
    
    ;console.log( total_n )
    ;console.log( scan_o )      ;return
  
    buffer_n +=
      hue_n

    scan_o
      .hue_a = []
    
    while
    (
      look_n
      <
      hue_n
    )
    {
      length_n =
        hueLookup_a
          [look_n]

      scan_o
        .hue_a
          [ look_n ] =
            new Int32Array
            (
              buffer_a,
              buffer_n,
              length_n
            )

      buffer_n +=
        length_n
        
      ++look_n
    }

    return scan_o
    //==>

    
    //=== SAT
    look_n = 0

    let sat_n = 101

    let satLookup_a =
      new Int32Array
      (
        buffer_a,
        buffer_n,
        sat_n
      )

    buffer_n +=
      sat_n

    scan_o
      .sat_a = []
    
    while
    (
      look_n
      <
      sat_n
    )
    {
      length_n =
        satLookup_a
          [look_n]

      scan_o
        .sat_a
          [ look_n ] =
            new Int32Array
            (
              buffer_a,
              buffer_n,
              length_n
            )

      buffer_n +=
        length_n
        
      ++look_n
    }

    //=== LUM
    look_n = 0

    let lum_n = 101

    let lumLookup_a =
      new Int32Array
      (
        buffer_a,
        buffer_n,
        lum_n
      )

    buffer_n +=
      lum_n

    scan_o
      .lum_a = []
    
    while
    (
      look_n
      <
      lum_n
    )
    {
      length_n =
        lumLookup_a
          [look_n]

      scan_o
        .lum_a
          [ look_n ] =
            new Int32Array
            (
              buffer_a,
              buffer_n,
              length_n
            )

      buffer_n +=
        length_n
        
      ++look_n
    }

    return scan_o
  }
  ,
}
