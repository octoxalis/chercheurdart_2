
const RGB_H__n=(_,a,o)=>{const s=Math.min(_,a,o),t=Math.max(_,a,o);if(t===s)return 0;const n=t-s;return~~(60*(t===_?(a-o)/n+(a<o?6:0):t===a?(o-_)/n+2:(_-a)/n+4))},RGB_S__n=(_,a,o)=>{const s=Math.min(_,a,o),t=Math.max(_,a,o),n=t-s;if(!n)return 0;const e=s+t;return e>255?n/(510-t-s):n/e},RGB_L__n=(_,a,o)=>(Math.min(_,a,o)+Math.max(_,a,o))/510,STAT_W_o={port_o:null,status_o:{scan_b:!1},message_o:["GET_scan","GET_status","PUT_canvas","PUT_draw"],scan_a:null,client_o:{},script_o:new Set,script__v(_){if(_){let a=[];for(let o of _.split(" "))STAT_W_o.script_o.has(o)||(STAT_W_o.script_o.add(o),a.push(`${o}.min.js`));a.length&&self.importScripts(...a)}},sleep__v:_=>new Promise((a=>setTimeout(a,_))),async waitScan__v(_){let a=100;for(;!STAT_W_o.status_o.scan_b;){if(!(--a>0))return STAT_W_o.post__v({client_s:_,task_s:"PUT_error",error_s:"scan is not available"}),!1;await STAT_W_o.sleep__v(50)}return!0},async get_scan__v(_){if(!STAT_W_o.scan_a){console.time("scan");
//!!!!!!!!!!!!!!!!!!!!!!!!!!
const a=`/assets/media/img/${_.work_s}/full/max/0/color.jpeg`,o=await fetch(a),s=await o.blob(),t=await createImageBitmap(s),n=new OffscreenCanvas(t.width,t.height).getContext("2d");n.drawImage(t,0,0);const e=n.getImageData(0,0,t.width,t.height);STAT_W_o.scan_a=new Array(9);let T,c,r,A=360;for(STAT_W_o.scan_a[0]=new Array(A),STAT_W_o.scan_a[1]=new Array(A);--A>=0;)STAT_W_o.scan_a[0][A]=[],STAT_W_o.scan_a[1][A]=0;for(A=101,STAT_W_o.scan_a[3]=new Array(A),STAT_W_o.scan_a[4]=new Array(A);--A>=0;)STAT_W_o.scan_a[3][A]=[],STAT_W_o.scan_a[4][A]=0;for(A=101,STAT_W_o.scan_a[6]=new Array(A),STAT_W_o.scan_a[7]=new Array(A);--A>=0;)STAT_W_o.scan_a[6][A]=[],STAT_W_o.scan_a[7][A]=0;for(let _=0;_<e.data.length;_+=4){T=e.data[_],c=e.data[_+1],r=e.data[_+2];let a=RGB_H__n(T,c,r);STAT_W_o.scan_a[0][a].push(_),STAT_W_o.scan_a[1][a]+=1;let o=~~(100*RGB_S__n(T,c,r));STAT_W_o.scan_a[3][o].push(_),STAT_W_o.scan_a[4][o]+=1;let s=~~(100*RGB_L__n(T,c,r));STAT_W_o.scan_a[6][s].push(_),STAT_W_o.scan_a[7][s]+=1}const S=_=>{const a=_.length;let o=new Array(a);for(let s=0;s<a;++s)o[s]=[_[s],s];return o.sort(((_,a)=>a[0]-_[0])),o};STAT_W_o.scan_a[2]=S(STAT_W_o.scan_a[1]),STAT_W_o.scan_a[5]=S(STAT_W_o.scan_a[4]),STAT_W_o.scan_a[8]=S(STAT_W_o.scan_a[7]),console.timeEnd("scan")}},get_status__v(){STAT_W_o.post__v({task_s:"PUT_status",status_o:STAT_W_o.status_o},[STAT_W_o.status_o])},put_canvas__v(_){const{client_s:a,id_s:o}=_;STAT_W_o.client_o[`${a}_o`]||(STAT_W_o.client_o[`${a}_o`]={}),STAT_W_o.client_o[`${a}_o`][`${o}_o`]={},STAT_W_o.client_o[`${a}_o`][`${o}_o`].canvas_o=_.canvas_e;const s=_.canvas_e.getContext("2d"),t=_.pixel_n;s.scale(.5*t,.5*t),STAT_W_o.client_o[`${a}_o`][`${o}_o`].context_o=s},put_draw__v(_){STAT_W_o[`put_draw_${_.client_s}__v`](_)},put_draw_burst__v(_){const a=[];let o=0;for(let _ of STAT_W_o.scan_a[1])a[o]=_?{frequency_n:_,hsl_a:[o,100,50]}:null,++o;const{client_s:s}=_,t={color_a:a,range_n:360,canvas_o:STAT_W_o.client_o[`${s}_o`].hue_o.canvas_o,median_n:STAT_W_o.client_o[`${s}_o`].hue_o.canvas_o.width>>1,maxfreq_n:STAT_W_o.scan_a[2][0][0]};burst_c=new ColorBurst(t)},message__v(_){const a=_.data;STAT_W_o.script__v(a.script_s);const o=a.task_s;if(STAT_W_o.message_o.includes(o)){const _=o.toLowerCase()+"__v";STAT_W_o[_](a)}},post__v(_){STAT_W_o.port_o.postMessage(_)},handleError__v:_=>console.log`ERROR: ${_.message}`};onconnect=_=>{STAT_W_o.port_o=_.ports[0],STAT_W_o.port_o.onmessage=STAT_W_o.message__v,STAT_W_o.port_o.onmessageerror=STAT_W_o.handleError__v};